/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JMenuItem;
import modelLayer.Card;
import modelLayer.Deck;

/**
 *
 * @author viva
 */
public class game extends javax.swing.JFrame {

    private Deck deck;

    /**
     * Creates new form game
     */
    public game() {
        initComponents();
        deck = new Deck();
        fillPopup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        showImage = new javax.swing.JLabel();
        redButton = new javax.swing.JButton();
        Clubs = new javax.swing.JButton();
        multipleBy2 = new javax.swing.JLabel();
        multipleBy4 = new javax.swing.JLabel();
        Hearts = new javax.swing.JButton();
        blackButton2 = new javax.swing.JButton();
        Diamonds = new javax.swing.JButton();
        Spades = new javax.swing.JButton();
        message = new javax.swing.JLabel();
        Value = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImages(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 51, 51));

        showImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/StartCard.png"))); // NOI18N

        redButton.setText("Red");
        redButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redButtonActionPerformed(evt);
            }
        });

        Clubs.setText("Clubs");
        Clubs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClubsActionPerformed(evt);
            }
        });

        multipleBy2.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        multipleBy2.setText("                       x2");

        multipleBy4.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        multipleBy4.setText("                       x4");

        Hearts.setText("Hearts");
        Hearts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeartsActionPerformed(evt);
            }
        });

        blackButton2.setText("Black");
        blackButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackButton2ActionPerformed(evt);
            }
        });

        Diamonds.setText("Diamonds");
        Diamonds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiamondsActionPerformed(evt);
            }
        });

        Spades.setText("Spades");
        Spades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpadesActionPerformed(evt);
            }
        });

        Value.setText("Number");
        Value.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ValueMouseClicked(evt);
            }
        });
        Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(Clubs)
                        .addGap(26, 26, 26)
                        .addComponent(Diamonds)
                        .addGap(18, 18, 18)
                        .addComponent(Hearts)
                        .addGap(18, 18, 18)
                        .addComponent(Spades))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(blackButton2)
                        .addGap(37, 37, 37)
                        .addComponent(redButton))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(121, 121, 121)
                            .addComponent(Value)
                            .addGap(46, 46, 46)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(showImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(multipleBy2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(multipleBy4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(227, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showImage)
                    .addComponent(Value))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(multipleBy2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redButton)
                    .addComponent(blackButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multipleBy4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Clubs)
                    .addComponent(Diamonds)
                    .addComponent(Hearts)
                    .addComponent(Spades))
                .addGap(101, 101, 101))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void redButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redButtonActionPerformed
        submitBlackOrRed(evt);
    }//GEN-LAST:event_redButtonActionPerformed
    private void submitSuit(ActionEvent evt) {
        try {
            Card c = deck.takeTopCard();
            String str = c.getSuit().toString();
            showImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/" + c.getValue() + str + ".png")));
            if (str.equals(evt.getActionCommand().toUpperCase())) {
                message.setText("You win");
            } else {
                message.setText("Bad luck. Try again");
            }
        } catch (Exception e) {
          dealWithException();
        }
    }

    private void submitBlackOrRed(ActionEvent evt) {
        try {
            Card c = deck.takeTopCard();
            int index = c.getSuitStrength();
            showImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/" + c.getValue() + c.getSuit().toString() + ".png")));
            if (evt.getActionCommand().equals("Red")) {
                if (index == 2 || index == 3) {
                    message.setText("You win");
                } else {
                    message.setText("Bad luck. Try again");
                }
            } else if (evt.getActionCommand().equals("Black")) {
                if (index != 2 && index != 3) {
                    message.setText("You win");
                } else {
                    message.setText("Bad luck. Try again");
                }
            }
        } catch (Exception e) {
           dealWithException();
        }
    }

    private void dealWithException(){
         deck = new Deck();
            Card c = deck.takeTopCard();
            showImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/" + c.getValue() + c.getSuit().toString() + ".png")));
    }
    private void ClubsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClubsActionPerformed
        submitSuit(evt);
    }//GEN-LAST:event_ClubsActionPerformed

    private void HeartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeartsActionPerformed
        submitSuit(evt);
    }//GEN-LAST:event_HeartsActionPerformed

    private void blackButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackButton2ActionPerformed
        submitBlackOrRed(evt);
    }//GEN-LAST:event_blackButton2ActionPerformed

    private void DiamondsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiamondsActionPerformed
        submitSuit(evt);
    }//GEN-LAST:event_DiamondsActionPerformed

    private void SpadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpadesActionPerformed
        submitSuit(evt);
    }//GEN-LAST:event_SpadesActionPerformed

    private void ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValueActionPerformed
        if (!jPopupMenu1.isVisible()) {
            jPopupMenu1.setVisible(true);
        } else {
            jPopupMenu1.setVisible(false);
        }
    }//GEN-LAST:event_ValueActionPerformed
    private void fillPopup() {
        JMenuItem item;
        ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                jPopupMenu1.setVisible(false);
                try {
                    Card c = deck.takeTopCard();
                    showImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/" + c.getValue() + c.getSuit().toString() + ".png")));
                    if (e.getActionCommand().equals(c.getValue() + "")) {
                        message.setText("You win");
                    } else if (e.getActionCommand().equals("Jack") && c.getValue() == 11) {
                        message.setText("You win");
                    } else if (e.getActionCommand().equals("Queen") && c.getValue() == 12) {
                        message.setText("You win");
                    } else if (e.getActionCommand().equals("King") && c.getValue() == 13) {
                        message.setText("You win");
                    } else if (e.getActionCommand().equals("Ace") && c.getValue() == 11) {
                        message.setText("You win");
                    } else {
                        message.setText("Bad luck. Try again");
                    }
                } catch (Exception ex) {
                    dealWithException();
                }
            }
        };

        for (int i = 2; i < 11; i++) {
            jPopupMenu1.add(item = new JMenuItem(i + ""));
            item.addActionListener(listener);
        }
        jPopupMenu1.add(item = new JMenuItem("Jack"));
        item.addActionListener(listener);
        jPopupMenu1.add(item = new JMenuItem("Queen"));
        item.addActionListener(listener);
        jPopupMenu1.add(item = new JMenuItem("King"));
        item.addActionListener(listener);
        jPopupMenu1.add(item = new JMenuItem("Ace"));
        item.addActionListener(listener);
    }
    private void ValueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ValueMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ValueMouseClicked

    private void displayImage() {
        Card c = deck.takeTopCard();
        showImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/" + c.getValue() + c.getSuit().toString() + ".png")));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clubs;
    private javax.swing.JButton Diamonds;
    private javax.swing.JButton Hearts;
    private javax.swing.JButton Spades;
    private javax.swing.JButton Value;
    private javax.swing.JButton blackButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JLabel message;
    private javax.swing.JLabel multipleBy2;
    private javax.swing.JLabel multipleBy4;
    private javax.swing.JButton redButton;
    private javax.swing.JLabel showImage;
    // End of variables declaration//GEN-END:variables

    private static class MouseListenerImpl implements MouseListener {

        public MouseListenerImpl() {
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mousePressed(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseExited(MouseEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }
}
